//create a binary search tree and perform all the operations
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *left;
    struct node *right;
};

struct node *tree=NULL;
struct node *insertElement(struct node *, int);
void preorderTraversal(struct node *);
void inorderTraversal(struct node *);
void postorderTraversal(struct node *);
struct node *findMinElement(struct node *);
struct node *findMaxElement(struct node *);
struct node *deleteElement(struct node *, int);
int countElements(struct node *);

int main()
{
    int option, val;
    struct node *ptr;
    do
    {
        printf("\n 1. Insert Element");
        printf("\n 2. Preorder Traversal");
        printf("\n 3. Inorder Traversal");
        printf("\n 4. Postorder Traversal");
        printf("\n 5. Find the smallest element");
        printf("\n 6. Find the largest element");
        printf("\n 7. Delete an Element");
        printf("\n 8. Count number of Elements");
        printf("\n 9. Exit");
        printf("\n\n Enter your option : ");
        scanf("%d", &option);
        switch(option)
        {
            case 1:
            printf("\n Enter the value of the new node : ");
            scanf("%d", &val);
            tree =  insertElement(tree, val);
            break;
            case 2:
            printf("\n The elements of the tree are : \n");
            preorderTraversal(tree);
            break;
            case 3:
            printf("\n The elements of the tree are : \n");
            inorderTraversal(tree);
            break;
            case 4:
            printf("\n The elements of the tree are : \n");
            postorderTraversal(tree);
            break;
            case 5:
            ptr = findMinElement(tree);
            printf("\n Smallest element is :%d", ptr->data);
            break;
            case 6:
            ptr = findMaxElement(tree);
            printf("\n Largest element is :%d", ptr->data);
            break;
            case 7:
            printf("\n Enter the element to be deleted : ");
            scanf("%d", &val);
            tree = deleteElement(tree, val);
            break;
            case 8:
            printf ("\n The number of elements in the BST is:%d", 
countElements(tree));
            break;
        }
    }while (option != 9);
    
    return 0;
    
}


struct node *newNode(int item)
{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp -> left = NULL;
    temp -> data = item;
    temp -> right = NULL;
    return temp;
}


struct node *insertElement(struct node *tree, int val)
{
    if (tree == NULL)
    {
        return newNode(val);
    }
    if (val < tree->data)
    {
        tree->left=insertElement(tree->left, val);
    }
    else
    {
        tree->right=insertElement(tree->right, val);
    }
    return tree;
}


void preorderTraversal(struct node *tree)
{
    if (tree != NULL)
    {
        printf("%d ",tree->data);
        preorderTraversal(tree->left);
        preorderTraversal(tree->right);
    }
}


void inorderTraversal(struct node *tree)
{
    if (tree != NULL)
    {
        inorderTraversal(tree->left);
        printf("%d ", tree->data);
        inorderTraversal(tree->right);
    }
}


void postorderTraversal(struct node *tree)
{
    if (tree != NULL)
    {
        postorderTraversal(tree->left);
        postorderTraversal(tree->right);
        printf("%d ", tree->data);
    }
}


struct node *findMinElement(struct node *tree)
{
    if(tree == NULL || tree->left == NULL)
    {
        return tree;
    }
    else
    {
        return findMinElement(tree->left);
    }
}


struct node *findMaxElement(struct node *tree)
{
    if(tree == NULL || tree->right == NULL)
    {
        return tree;
    }
    else
    {
        return findMaxElement(tree->right);
    }
}


struct node *deleteElement(struct node *tree, int val)
{
    if (tree == NULL)
    {
        return tree;
    }
    if(val < tree->data)
    {
        tree->left = deleteElement(tree->left,val);
    }
    else if(val > tree->data)
    {
        tree->right = deleteElement(tree->right,val);
    }
    else
    {
        if(tree->left==NULL)
        {
            struct node *temp = tree->right;
            free(tree);
            return temp;
        }
        else if(tree->right==NULL)
        {
            struct node *temp = tree->left;
            free(tree);
            return temp;
        }
    struct node *temp = findMinElement(tree->right);
    tree->data=temp->data;
    tree->right = deleteElement(tree->right, temp->data);
    }
    return tree;
}


int countElements(struct node *tree)
{
    if (tree == NULL)
    {
        return 0;
    }
    return 1+countElements(tree->left)+countElements(tree->right);
}
